name: Create Publish and Sign Docker Image

on:
  workflow_call:
    inputs:
      publish_command:
        required: true
        type: string
      digest_command: 
        required: true
        type: string
      image_name: 
        required: true
        type: string
      tag: 
        required: true
        type: string
      main: 
        type: string
    secrets:
      registry_username:
        required: true
      registry_password:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout release
        if: ${{ inputs.tag == 'release'}}
        uses: actions/checkout@d50f8ea76748df49594d9b109b614f3b4db63c71
        with:
          fetch-depth: 0

      - name: Checkout image
        if: ${{ inputs.tag == 'image'}}
        uses: actions/checkout@d50f8ea76748df49594d9b109b614f3b4db63c71

      - name: Unshallow
        if: ${{ inputs.tag == 'image'}}
        run: git fetch --prune --unshallow --tags

      - name: Set up Go
        uses: actions/setup-go@a5865a93f26fcb9014b34e4be3fb246a9691a281
        with:
          go-version: 1.17

      - name: Install Cosign
        uses: sigstore/cosign-installer@b4f55743d10d066fee1de1cf0fa26069700c0195
        with:
          cosign-release: 'v1.4.1'

      - name: Cache Go modules
        uses: actions/cache@2d8d0d1c9b41812b6fd3d4ae064360e7d8762c7b
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Log into ghcr.io
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{secrets.registry_username}}
          password: ${{secrets.registry_password}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2d4bfe71c9c7c6adb935665efb1a651cc8e799ba

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@2a6fbda6d8bd6fe40f8b36c71fca20ffc286129e
        id: buildx
        with:
          install: true

      - name: Run Trivy vulnerability scanner in repo mode
        if: ${{inputs.tag == 'release'}}
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Set Version
        if: ${{ inputs.tag == 'release'}}
        run: |
          echo "KYVERNO_VERSION=$(git describe --match "v[0-9]*" --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Generate SBOM JSON
        if: ${{inputs.tag == 'release'}}
        uses: CycloneDX/gh-gomod-generate-sbom@b20a91b1feacb898d54dfe6983ed46b42cb93809
        with:
          version: v1
          args: app -licenses -json -output ${{inputs.image_name}}-${{ env.KYVERNO_VERSION }}-bom.cdx.json -main ${{inputs.main}}

      - name: Upload SBOM JSON
        if: ${{inputs.tag == 'release'}}
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
        with:
          name: ${{inputs.image_name}}-bom-cdx
          path: ${{inputs.image_name}}-v*-bom.cdx.json

      - name: Extract branch name
        if: ${{inputs.tag == 'image'}}
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Check branch
        if: ${{inputs.tag == 'image' && steps.extract_branch.outputs.branch != 'main'}}
        id: check-branch
        run: |
          if [[ ${{ steps.extract_branch.outputs.branch }} =~ ^release-[0-9]+\.[0-9]$ ]]; then
              echo ::set-output name=match::true
          fi

      - name : Docker images publish
        if: ${{inputs.tag == 'image' && steps.extract_branch.outputs.branch == 'main'}}
        run: make ${{inputs.publish_command}}-dev

      - name : Docker release-images publish
        if: ${{inputs.tag == 'release' || (inputs.tag == 'image' && steps.check-branch.outputs.match == 'true')}}
        run: make ${{inputs.publish_command}}

      - name: get image digest
        if: ${{inputs.tag == 'image' && steps.extract_branch.outputs.branch == 'main'}}
        id: get-step-image
        run: |
          echo "::set-output name=digest::$(make ${{inputs.digest_command}}-dev)"

      - name: get release-image digest
        if: ${{inputs.tag == 'release' || (inputs.tag == 'image' && steps.check-branch.outputs.match == 'true')}}
        id: get-step
        run: |
          echo "::set-output name=digest::$(make ${{inputs.digest_command}})"

      - name: Sign image
        if: ${{inputs.tag == 'image' && steps.extract_branch.outputs.branch == 'main'}}
        env:
          COSIGN_EXPERIMENTAL: "true"
          COSIGN_REPOSITORY: "ghcr.io/kyverno/signatures"
        run: |          
          cosign sign \
          -a "repo=${{ github.repository }}" \
          -a "workflow=${{ github.workflow }}" \
          -a "ref=${{ github.sha }}" \
          ghcr.io/kyverno/${{inputs.image_name}}@sha256:${{ steps.get-step-image.outputs.digest }}

      - name: Sign release-image
        if: ${{inputs.tag == 'release' || (inputs.tag == 'image' && steps.check-branch.outputs.match == 'true')}}
        env:
          COSIGN_EXPERIMENTAL: "true"
          COSIGN_REPOSITORY: "ghcr.io/kyverno/signatures"
        run: |          
          cosign sign \
          -a "repo=${{ github.repository }}" \
          -a "workflow=${{ github.workflow }}" \
          -a "ref=${{ github.sha }}" \
          ghcr.io/kyverno/${{inputs.image_name}}@sha256:${{ steps.get-step.outputs.digest }}

      - name : Attach SBOM
        if: ${{inputs.tag == 'release'}}
        env:
          COSIGN_REPOSITORY: "ghcr.io/kyverno/sbom"
        run: cosign attach sbom --sbom ./${{inputs.image_name}}-v*-bom.cdx.json --type cyclonedx  ghcr.io/kyverno/${{inputs.image_name}}@sha256:${{ steps.get-step.outputs.digest }}
